
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
int counting = 0;//저장된 간선의 수 카운팅
void make_table(int table[][3], int a, int b, int c)//간선의 양 끝 엣지와 가중치를 표로 저장
{
	table[counting][0] = a;
	table[counting][1] = b;
	table[counting][2] = c;
	counting++;
}
void sort_table(int table[][3])//버블 소팅을 이용하여 table을 소팅
{
	int temp[3];
	for (int i = 0; i < 14; i++)
	{
		for (int j =0; j < (14-i)-1; j++)
		{
			if (table[j][2] > table[j + 1][2])//소팅
			{
				for (int k = 0; k < 3; k++)
				{
					temp[k] = table[j][k];
					table[j][k] = table[j+1][k];
					table[j+1][k] = temp[k];
				}
			}
		}
	}
}
int kruskal(int table[][3])
{
	int e1, e2;//양 엣지, 가중치의 합을 저장할 변수 선언.
	int e_o1, e_o2;
	int sum_of_length = 0;
	int count=0;//추가된 간선의 갯수를 새는 변수 선언
	bool connected_1[9] = { false ,false,false,false,false,false,false,false,false };//각 엣지의 집합1 연결 여부를 표시
	bool connected_2[9] = { false ,false,false,false,false,false,false,false,false };//각 엣지의 집합2 연결 여부를 표시
	for (int i = 0; i < counting; i++)
	{
		e1 = table[i][0];
		e2 = table[i][1];
		if (connected_1[e1] == true && connected_1[e2] == true)//집합1에 소속되어있는 두 엣지를 연결하려 하면 사이클이 발생하므로 pass
		{
		}
		else if (connected_1[e1] == true || connected_1[e2] == true||count==0)//둘 중에 하나라도 집합1에 속해져 있는 경우
		{
			if ((connected_1[e1] != true) && count != 0)//둘 중 e1이 집합에 포함되어있지 않은경우 연결해주고,2번 집합에 있는 엣지들은e1과 연결되어있으므로 함께 연결, true로 표시해 향후 사이클 방지
			{
				if (connected_2[e1] == true)//e1이 따로 떨어진 집합에 연결되어있는경우, 연결해줌
				{
					for (int i = 1; i < 9; i++)
					{
						if (connected_2[i] == true)
						{
							connected_1[i] = true;
							connected_2[i] = false;//1번 집합에 연결해 주었으므로 2번집합을 소멸
						}
					}
					sum_of_length += table[i][2];
					printf("간선 V%d - V%d추가, 가중치:%d\n", e1, e2, table[i][2]);
					count++;
				}
				else//다른 집합에 연결되어있는 상태가 아닌, 연결되지 않은 엣지인 경우
				{
					connected_1[e1] = true;
					sum_of_length += table[i][2];
					printf("간선 V%d - V%d추가, 가중치:%d\n", e1, e2, table[i][2]);
					count++;
				}
	
				
			}
			else if ((connected_1[e2] != true)&&count!=0)//둘 중 e2가 집합에 포함되어있지 않은경우 연결해주고 true로 표시해 향후 사이클 방지
			{
				if (connected_2[e2] == true)//e2가 따로 떨어진 집합에 연결되어있는경우, 연결해줌
				{
					for (int i = 1; i < 9; i++)
					{
						if (connected_2[i] == true)
						{
							connected_1[i] = true;
							connected_2[i] = false;//1번 집합에 연결해 주었으므로 2번집합을 소멸
						}
					}
					sum_of_length += table[i][2];
					printf("간선 V%d - V%d추가, 가중치:%d\n", e1, e2, table[i][2]);
					count++;
				}
				else//e2가다른 집합에 연결되어있는 상태가 아닌, 연결되지 않은 엣지인 경우
				{
					connected_1[e2] = true;
					sum_of_length += table[i][2];
					printf("간선 V%d - V%d추가, 가중치:%d\n", e1, e2, table[i][2]);
					count++;
				}
			}
			else//count가 0인 경우
			{
				connected_1[e1] = true;
				connected_1[e2] = true;
				sum_of_length += table[i][2];
				printf("간선 V%d - V%d추가, 가중치:%d\n", e1, e2, table[i][2]);
				count++;
			}
			
		}
		else if (connected_1[e1] != true && connected_1[e2]  != true && count!=0)//집합1에 속해있지 않은 두 엣지를 연결하려 하는 경우, 가장 처음은 제외.
		{
			connected_2[e1] = true; connected_2[e2] = true;
			sum_of_length += table[i][2];
			printf("집합1에 속해있지 않은간선 V%d - V%d를 2번 집합으로 추가, 가중치:%d\n", e1, e2, table[i][2]);
			count++;
		}
		
	}
	printf("%d개의 간선 으로 최소 신장 트리 구성 완료, 가중치합:%d", count, sum_of_length);
}
int main(void)
{
	int table[14][3];//14개의 간선, 양 끝 엣지, 가중치 순으로 표에 저장
	for (int i = 0; i < 14; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			table[i][j] = 0;
		}
	}
	make_table(table, 1, 2, 11);
	make_table(table, 1, 3, 9);
	make_table(table, 1, 4, 8);
	make_table(table, 4, 7, 10);
	make_table(table, 4, 3, 15);
	make_table(table, 3, 6, 12);
	make_table(table, 3, 7, 1);
	make_table(table, 2, 3, 3);
	make_table(table, 2, 6, 8);
	make_table(table, 2, 5, 8);
	make_table(table, 5, 6, 7);
	make_table(table, 5, 8, 4);
	make_table(table, 6, 8, 5);
	make_table(table, 7, 8, 2);
	sort_table(table);
	kruskal(table);
}
