#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define MAX_N 32//5개의 노드의 최적경로 이므로 2^5, 32를 맥스넘버로 설정
int Min2(int a, int b)//두개 비교
{
	if (a < b)
	{
		return a;
	}
	else if (a > b) return b;
	else return a;
}
int Min3(int a, int b, int c)//세개 비교
{
	int m;
	if (a > b)m = b;
	else m = a;
	if (m > c)m = c;
	return m;
}
int Min_print3(int a, int b, int c)//세개 비교시 최소값 경로
{
	int m;
	if (a > b)m = b;
	else m = a;
	if (m > c)
	{
		m = c;
		return 3;
	}
	else if (m < c && m == a)
	{
		return 1;
	}
	else if (m < c && m == b)
	{
		return 2;
	}
	
}
int Min4(int a, int b, int c, int d)//네개 비교
{
	int m1,m2;
	if (a > b)m1 = b;
	else m1 = a;
	if (c > d)m2 = d;
	else m2 = c;
	if (m1 < m2)return m1;
	else return m2;
}
int Minimum_print(int a, int b, int c, int d)//최종 최적경로값이 구해진 경로 출력
{
	int m1, m2;
	if (a > b)m1 = b;
	else m1 = a;
	if (c > d)m2 = d;
	else m2 = c;
	if (m1 < m2)
	{
		if (m1 == a)
		{
			return 1;
		}
		else return 2;
	}
	else
	{
		if (m2 == c) return 3;
		else return 4;
	}
}
void traveling(int n, int w[][6],int P[][MAX_N])//최적 경로찾기
{
	for (int i = 2; i < n; i++)//각 노드에서 1로 가는 거리 저장(총 두개의 노드를 거침)
	{
		P[i][(int)pow(2, (double) i - 1) + 1] = w[i][1];
		printf("Path[%d][%d]=%d\n",i,(int)pow(2,(double)(i-1))+1, P[i][(int)pow(2, (double)(i - 1)) + 1]);
		
	}
	printf("===출발점에서 바로 1로 갈때의 경로값 저장 완료===\n");
	for (int j = 1; j < 4; j++)//3개~5개의 노드를 거치는 과정을 계산(1 포함); 
	{
		if(j==1)printf("==1이 아닌 한 노드에서 시작하여 1개의 노드 거쳐 1로 복귀==\n");
		else if(j==2)printf("==1이 아닌 한 노드에서 시작하여 2개의 노드 순회 후 1로 복귀==\n");
		else if (j==3)printf("==1이 아닌 한 노드에서 시작하여 모든 노드 순회 후 1로 복귀==\n");
		for (int k = 1; k < n; k++)
		{
			if (j == 1)//3개의 노드를 거침(출발점,도착점:1 포함)
			{
				
				if (k == 1)
				{
				
				}
				else
				{
					for (int id = 1; id < n-1; id++)
					{
						if (id != k - 1)
						{
							P[k][(int)pow(2, (double)(k - 1)) + (int)pow(2, (double)id) + 1] = w[k][id + 1] + P[id + 1][(int)pow(2, (double)id) + 1];
							printf("Path[%d][%d]=w[%d][%d]+Path[%d][%d]=%d\n", k, (int)pow(2, (double)k - 1) + (int)pow(2, (double)id) + 1,k,id+1,id+1, (int)pow(2, (double)id) + 1, w[k][id + 1] + P[id + 1][(int)pow(2, (double)id) + 1]);
						}
					}
				}
			}
			else if (j == 2)//4개의 노드를 거침,min계산 필요
			{
				
				if (k == 1)
				{
					
				}
				else
				{
					for (int n1 = 2; n1 < n - 1; n1++)//거칠 노드 두개
					{
						for (int n2 = n1 + 1; n2 < n; n2++)
						{
							if (n1 != k && n2 != k)
							{
								int a = w[k][n1] + P[n1][(int)pow(2, (double)(n1 - 1)) + (int)pow(2, (double)(n2 - 1)) + 1];
								int b = w[k][n2] + P[n2][(int)pow(2, (double)(n1 - 1)) + (int)pow(2, (double)(n2 - 1)) + 1];
								P[k][(int)pow(2, (double)(n1 - 1)) + (int)pow(2, (double)(n2 - 1)) + (int)pow(2, (double)(k - 1)) + 1] = Min2(a, b);
								if (a < b)
								{
									printf("Path[%d][%d]=w[%d][%d]+Path[%d][%d]=%d\n", k, (int)pow(2, (double)(n1 - 1)) + (int)pow(2, (double)(n2 - 1)) + (int)pow(2, (double)(k - 1)) + 1,k,n1,n1, (int)pow(2, (double)(n1 - 1)) + (int)pow(2, (double)(n2 - 1)) + 1, Min2(a, b));
								}
								else if (a > b)
								{
									printf("Path[%d][%d]=w[%d][%d]+Path[%d][%d]=%d\n", k, (int)pow(2, (double)(n1 - 1)) + (int)pow(2, (double)(n2 - 1)) + (int)pow(2, (double)(k - 1)) + 1, k, n2, n2, (int)pow(2, (double)(n1 - 1)) + (int)pow(2, (double)(n2 - 1)) + 1, Min2(a, b));
								}
							}
						}
					}
				}
				
			}
			else if (j == 3)//Path[k][11111]구하기,k에서 시작해서 모든 노드 순회 후 1로 복귀
			{
				
				if (k != 1)
				{
					int n3, n4, n5;//k와 1을 제외한 나머지 세개의 순환할 노드
						for (n3 = 2; n3 < n - 2; n3++)
						{
							for (n4 = n3 + 1; n4 < n - 1; n4++)
							{
								for (n5 = n4 + 1; n5 < n; n5++)
								{
									if (n3 != k && n4 != k && n5 != k)
									{
										P[k][MAX_N-1] = Min3(w[k][n3] + P[n3][MAX_N - 1 - (int)pow(2, (double)(k - 1))], w[k][n4] + P[n4][MAX_N - 1 - (int)pow(2, (double)k - 1)], w[k][n5] + P[n5][MAX_N - 1 - (int)pow(2, (double)k - 1)]);
										if (Min_print3(w[k][n3] + P[n3][MAX_N - 1 - (int)pow(2, (double)(k - 1))], w[k][n4] + P[n4][MAX_N - 1 - (int)pow(2, (double)k - 1)], w[k][n5] + P[n5][MAX_N - 1 - (int)pow(2, (double)k - 1)])==1)
										{
											printf("Path[%d][%d]=w[%d][%d]+Path[%d][%d]=%d\n", k, 31,k,n3,n3, MAX_N - 1 - (int)pow(2, (double)(k - 1)) ,P[k][31]);
										}
										else if (Min_print3(w[k][n3] + P[n3][MAX_N - 1 - (int)pow(2, (double)(k - 1))], w[k][n4] + P[n4][MAX_N - 1 - (int)pow(2, (double)k - 1)], w[k][n5] + P[n5][MAX_N - 1 - (int)pow(2, (double)k - 1)]) == 2)
										{
											printf("Path[%d][%d]=w[%d][%d]+Path[%d][%d]=%d\n", k, 31, k, n4, n4, MAX_N - 1 - (int)pow(2, (double)k - 1), P[k][31]);
										}
										else if (Min_print3(w[k][n3] + P[n3][MAX_N - 1 - (int)pow(2, (double)(k - 1))], w[k][n4] + P[n4][MAX_N - 1 - (int)pow(2, (double)k - 1)], w[k][n5] + P[n5][MAX_N - 1 - (int)pow(2, (double)k - 1)]) == 3)
										{
											printf("Path[%d][%d]=w[%d][%d]+Path[%d][%d]=%d\n", k, 31, k, n5, n5, MAX_N - 1 - (int)pow(2, (double)k - 1), P[k][31]);
										}
									}
								}
							}
						}
				}
				
			}
		}
	}
	P[1][MAX_N-1] = Min4(w[1][2] + P[2][31], w[1][3] + P[3][31], w[1][4] + P[4][31], w[1][5] + P[5][31]);//최종 최적 일주경로값
}
int main()
{
	int W[6][6] = { {0,0,0,0,0,0}, {0,0,8,13,18,20},
		{0,3,0,7,8,10},{0,4,11,0,10,7},{0,6,6,7,0,11},
		{0,10,6,2,1,0} };
	int Path[6][MAX_N] = { 0 };//경로 저장 집합
	traveling(6, W, Path);
	if (Minimum_print(W[1][2] + Path[2][31], W[1][3] + Path[3][31], W[1][4] + Path[4][31], W[1][5] + Path[5][31]) == 1)
	{
		printf("최적 경로: 1에서 출발하여 2를거쳐 나머지 노드를 순회하고 다시 1로 들어옴:%d", W[1][2] + Path[2][31]);
	}
	else if (Minimum_print(W[1][2] + Path[2][31], W[1][3] + Path[3][31], W[1][4] + Path[4][31], W[1][5] + Path[5][31]) == 2)
	{
		printf("최적 경로: 1에서 출발하여 3을거쳐 나머지 노드를 순회하고 다시 1로 들어옴:%d", W[1][3] + Path[3][31]);
	}
	else if (Minimum_print(W[1][2] + Path[2][31], W[1][3] + Path[3][31], W[1][4] + Path[4][31], W[1][5] + Path[5][31]) == 3)
	{
		printf("최적 경로: 1에서 출발하여 4를거쳐 나머지 노드를 순회하고 다시 1로 들어옴:%d", W[1][4] + Path[4][31]);
	}
	else if (Minimum_print(W[1][2] + Path[2][31], W[1][3] + Path[3][31], W[1][4] + Path[4][31], W[1][5] + Path[5][31]) == 4)
	{
		printf("최적 경로: 1에서 출발하여 5를거쳐 나머지 노드를 순회하고 다시 1로 들어옴:%d", W[1][5] + Path[5][31]);
	}
}
